apply plugin: 'maven-publish'
apply plugin: 'signing'

// Create variables with empty default values
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
	// Read local.properties file first if it exists
	Properties p = new Properties()
	new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
	p.each { name, value -> ext[name] = value }
} else {
	// Use system environment variables
	ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
	ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
	ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
	ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
	ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
	ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
			snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
			stagingProfileId = sonatypeStagingProfileId
			username = ossrhUsername
			password = ossrhPassword
		}
	}
}

// to remove shadowed jar from the regular release publication
components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
	skip()
}

def configurePom(pom) {
	pom.with {
		name = "Stream Chat official Java API Client"
		description = "Stream Chat Java Client for backend integrations"
		url = 'https://github.com/getstream/stream-chat-java'
		licenses {
			license {
				name = 'Stream License'
				url = 'https://github.com/GetStream/stream-chat-java/blob/main/LICENSE'
			}
		}
		developers {
			developer {
				id = 'getstream-support'
				name = 'Stream Support'
				email = 'support@getstream.io'
			}
		}
		scm {
			connection = 'scm:git:github.com/getstream/stream-chat-java.git'
			developerConnection = 'scm:git:ssh://github.com/getstream/stream-chat-java.git'
			url = 'https://github.com/getstream/stream-chat-java/tree/main'
		}
	}
}

afterEvaluate {
	publishing {
		publications {
			release(MavenPublication) {
				from components.java
				artifactId 'stream-chat-java'
				configurePom(pom)
			}

			shadow(MavenPublication) { publication ->
				project.shadow.component(publication)
				artifactId 'stream-chat-java-all'
				artifact javadocJar
				artifact sourcesJar
				configurePom(pom)
			}
		}
	}
}

signing {
	sign publishing.publications
}

// Ensure that the publish tasks run after the sign tasks, otherwise gradle will complain
tasks.matching { it.name.startsWith('publish') }.all { publishTask ->
	tasks.matching { it.name.startsWith('sign') }.all { signTask ->
		publishTask.mustRunAfter(signTask)
	}
}

javadoc {
	options.addBooleanOption('html5', true)
}
