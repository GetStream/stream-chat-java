plugins {
	id 'java-library'
	id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'org.barfuin.gradle.jacocolog' version '3.1.0'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'io.getstream'
version = '1.29.0'
description = 'Stream Chat official Java SDK'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}

	withJavadocJar()
	withSourcesJar()
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://plugins.gradle.org/m2/" }
	maven { url uri('https://repo.maven.apache.org/maven2/') }
}

dependencies {
	implementation(platform("com.squareup.okhttp3:okhttp-bom:4.12.0"))

	// define any required OkHttp artifacts without version
	implementation("com.squareup.okhttp3:okhttp")

	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	testImplementation 'org.apache.commons:commons-lang3:3.12.0'
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	compileOnly 'org.jetbrains:annotations:24.1.0'

	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

def localProperties = new Properties()
def localPropertiesFile = project.rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
	localProperties.load(localPropertiesFile.newDataInputStream())
}

test {
	useJUnitPlatform()

	testLogging {
		exceptionFormat = 'full'
		events 'standard_out', 'standard_error', "passed", "skipped", "failed"
	}

	doFirst {
		// Inject local properties into tests runtime system properties
		localProperties.each{k, v ->
			systemProperty k.toString(), v.toString()
		}
	}

	finalizedBy jacocoTestReport
}

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
	main {
		output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
	}
}
spotless {
	java {
		googleJavaFormat()
	}

	groovyGradle {
		target '*.gradle'
		greclipse()
	}
}

jacocoTestReport {
	dependsOn test
}

task generateVersionProperties {
	doLast {
		def propertiesFile = file "$generatedVersionDir/version.properties"
		propertiesFile.parentFile.mkdirs()
		def properties = new Properties()
		properties.setProperty("version", rootProject.version.toString())
		propertiesFile.withWriter { properties.store(it, null) }
	}
}
processResources.dependsOn generateVersionProperties

shadowJar {
	enableRelocation true
	relocationPrefix "shadowed"
	mergeServiceFiles()
}

apply from: "publish.gradle"
